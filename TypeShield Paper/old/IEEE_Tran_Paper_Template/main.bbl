% Generated by IEEEtran.bst, version: 1.12 (2007/01/11)
\begin{thebibliography}{10}
\providecommand{\url}[1]{#1}
\csname url@samestyle\endcsname
\providecommand{\newblock}{\relax}
\providecommand{\bibinfo}[2]{#2}
\providecommand{\BIBentrySTDinterwordspacing}{\spaceskip=0pt\relax}
\providecommand{\BIBentryALTinterwordstretchfactor}{4}
\providecommand{\BIBentryALTinterwordspacing}{\spaceskip=\fontdimen2\font plus
\BIBentryALTinterwordstretchfactor\fontdimen3\font minus
  \fontdimen4\font\relax}
\providecommand{\BIBforeignlanguage}[2]{{%
\expandafter\ifx\csname l@#1\endcsname\relax
\typeout{** WARNING: IEEEtran.bst: No hyphenation pattern has been}%
\typeout{** loaded for the language `#1'. Using the pattern for}%
\typeout{** the default language instead.}%
\else
\language=\csname l@#1\endcsname
\fi
#2}}
\providecommand{\BIBdecl}{\relax}
\BIBdecl

\bibitem{N4618}
``{2016 Working Draft, Standard for ProgrammingLanguage C++ N4618,},'' 2016,
  \url{http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/n4618.pdf}.

\bibitem{schuster:coop}
F.~Schuster, T.~Tendyck, C.~Liebchen, L.~Davi, A.-R. Sadeghi, and T.~Holz,
  ``{Counterfeit Object-Oriented Programming},'' in \emph{Proceedings of the
  IEEE Symposium on Security and Privacy (S\&P),}, 2015.

\bibitem{crane:readactor++}
S.~Crane, S.~Volckaert, F.~Schuster, C.~Liebchen, P.~Larsen, L.~Davi, A.-R.
  Sadeghi, T.~Holz, B.~De~Sutter, and M.~Franz, ``{It’s a TRaP: Table
  Randomization and Protection against Function-Reuse Attacks},'' in
  \emph{Proceedings of the ACM SIGSAC Conference on Computer and Communications
  Security (CCS),}, 2015.

\bibitem{subversive-c:lettner}
J.~Lettner, B.~Kollenda, A.~Homescu, P.~Larsen, F.~Schuster, L.~Davi, A.-R.
  Sadeghi, T.~Holz, and M.~Franz, ``{Subversive-C: Abusing and Protecting
  Dynamic Message Dispatch},'' in \emph{USENIX Annual Technical Conference
  (USENIX ATC),}, 2016.

\bibitem{ctf:coop}
``{BlueLotus Team, Bctf challenge: bypass vtable read-only checks},''
  \url{https://github.com/ctfs/write-ups-2015/tree/master/bctf-2015/exploit/zhongguancun}.

\bibitem{loop:oriented}
B.~Lan, Y.~Li, H.~Sun, C.~Su, Y.~Liu, and Q.~Zeng, ``{Loop-Oriented
  Programming: A New Code Reuse Attack to Bypass Modern Defenses},'' in
  \emph{IEEE Trustcom/BigDataSE/ISPA}, 2015.

\bibitem{alias:undecidable}
G.~Ramalingam, ``{The Undecidability of Aliasing},'' in \emph{ACM Transactions
  on Programming Languages and Systems (TOPLAS),}, 1994.

\bibitem{abadi:cfi2}
M.~Abadi, M.~Budiu, {\'U}.~Erlingsson, and J.~Ligatti, ``{Control Flow
  Integrity},'' in \emph{Proceedings of the 12th ACM Conference on Computer and
  Communications Security (CCS),}, 2005.

\bibitem{abadi:cfi}
------, ``{Control Flow Integrity Principles, Implementations, and
  Applications},'' in \emph{ACM Transactions on Information and System Security
  (TISSEC),}, 2009.

\bibitem{safedispatch:jang}
D.~Jang, T.~Tatlock, and S.~Lerner, ``{SafeDispatch: Securing C++ Virtual Calls
  from Memory Corruption Attacks},'' in \emph{Symposium on Network and
  Distributed System Security (NDSS),}, 2014.

\bibitem{haller:shrinkwrap}
I.~Haller, E.~Goktas, E.~Athanasopoulos, G.~Portokalidis, and H.~Bos,
  ``{ShrinkWrap: VTable Protection Without Loose Ends},'' in \emph{Annual
  Computer Security Applications Conference (ACSAC),}, 2015.

\bibitem{vtv:tice}
C.~Tice, T.~Roeder, P.~Collingbourne, S.~Checkoway, {\'U}.~Erlingsson,
  L.~Lozano, and G.~Pike, ``{Enforcing Forward-Edge Control-Flow Integrity in
  GCC and LLVM},'' in \emph{Proceedings of the USENIX conference on Security
  (USENIX SEC),}, 2014.

\bibitem{bounov:interleaving}
D.~Bounov, R.~Gökhan~Kici, and S.~Lerner, ``{Protecting C++ Dynamic Dispatch
  Through VTable Interleaving},'' in \emph{Symposium on Network and Distributed
  System Security (NDSS),}, 2016.

\bibitem{ccfir:zhang}
C.~Zhang, T.~Wei, Z.~Chen, L.~Duan, L.~Szekeres, S.~McCamant, D.~Song, and
  W.~Zou, ``{Practical Control Flow Integrity \& Randomization for Binary
  Executables},'' in \emph{Proceedings of the IEEE Symposium on Security and
  Privacy (S\&P),}, 2013.

\bibitem{zhang:usenix}
M.~Zhang and R.~Sekar, ``{Control Flow Integrity for COTS Binaries},'' in
  \emph{(USENIX SEC),}, 2013.

\bibitem{payer:dimva}
M.~Payer, A.~Barresi, and T.~R.~Gross, ``{Fine-Grained Control-Flow Integrity
  through Binary Hardening},'' in \emph{DIMVA}, 2015.

\bibitem{veen:typearmor}
V.~v.~d. Veen, E.~Goktas, M.~Contag, A.~Pawlowski, X.~Chen, S.~Rawat, H.~Bos,
  T.~Holz, E.~Athanasopoulos, and C.~Giuffrida, ``{A Tough call: Mitigating
  Advanced Code-Reuse Attacks At The Binary Level},'' in \emph{Proceedings of
  the IEEE Symposium on Security and Privacy (S\&P),}, 2016.

\bibitem{vci:asiaccs}
M.~Elsabagh, F.~Dan, and A.~Stavrou, ``{Strict Virtual Call Integrity Checking
  for C ++ Binaries},'' in \emph{(ASIACCS),}, 2017.

\bibitem{zhang:vtrust}
C.~Zhang, S.~A. Carr, T.~Li, Y.~Ding, C.~Song, M.~Payer, and D.~Song,
  ``{VTrust: Regaining Trust on Virtual Calls},'' in \emph{Symposium on Network
  and Distributed System Security (NDSS),}, 2016.

\bibitem{iso:iecN3690}
I.~JTC1/SC22WG21, ``{ISO/IEC 14882:2013 Programming Language C++ (N3690)},''
  2013, \url{https://isocpp.org/files/papers/N3690.pdf}.

\bibitem{byoungyoung:typecasting}
B.~Lee, C.~Song, T.~Kim, and W.~Lee, ``{Type Casting Verification: Stopping an
  Emerging Attack Vector},'' in \emph{Proceedings of the USENIX Conference on
  Security (USENIX SEC),}, 2015.

\bibitem{khedker2009data}
U.~Khedker, A.~Sanyal, and B.~Sathe, \emph{{Data flow analysis: Theory and
  Practice}}.\hskip 1em plus 0.5em minus 0.4em\relax CRC Press, 2009.

\bibitem{bernat:dyninst}
A.~R. Bernat and B.~P. Miller, ``{Anywhere, Any-Time Binary Instrumentation},''
  in \emph{Proceedings of the 10th ACM SIGPLAN-SIGSOFT workshop on Program
  analysis for software tools, (PASTE),}, 2011.

\bibitem{dynamorio:drmemory}
``{DynamoRIO},'' \url{http://dynamorio.org/home.html}.

\bibitem{dang:asiaccs}
T.~H. Dang, P.~Maniatis, and D.~Wagner, ``{The Performance Cost of Shadow
  Stacks and Stack Canaries},'' in \emph{(ASIACCS),}, 2015.

\bibitem{conti:ccs}
M.~Conti, P.~Larsen, S.~Crane, L.~Davi, M.~Franz, M.~Negro, C.~Liebchen,
  M.~Qunaibit, and A.-R. Sadeghi, ``{Losing Control: On the Effectiveness of
  Control-Flow Integrity Under Stack Attacks},'' in \emph{(CCS),}, 2015.

\bibitem{carlini:bending}
N.~Carlini, A.~Barresi, M.~Payer, D.~Wagner, and T.~R. Gross, ``{Control-Flow
  Bending: On the Effectiveness of Control-Flow Integrity},'' in
  \emph{Proceedings of the USENIX conference on Security (USENIX SEC),}, 2015.

\bibitem{andriesse:indepth}
D.~Andriesse, X.~Chen, V.~v.~d. Veen, A.~Slowinska, and H.~Bos, ``{An In-Depth
  Analysis of Disassembly on Full-Scale x86/x64 Binaries},'' in
  \emph{Proceedings of the USENIX Conference on Security (USENIX SEC),}, 2016.

\bibitem{alan:mycroft}
A.~Mycroft, ``{Lecture Notes},''
  \url{https://www.cl.cam.ac.uk/~am21/papers/sas07slides.pdf}.

\bibitem{lin:rewards}
Z.~Lin, X.~Zhang, and D.~Xu, ``{Automatic Reverse Engineering of Data
  Structures from Binary Execution},'' in \emph{Symposium on Network and
  Distributed System Security (NDSS),}, 2010.

\bibitem{bap:brumley}
D.~Brumley, I.~Jager, T.~Avgerinos, and E.~J. Schwartz, ``{BAP: A Binary
  Analysis Platform},'' in \emph{Proceedings of Computer AidedVTint: Protecting
  Virtual Function Tab Verification (CAV),}, 2011.

\bibitem{fokin:smartdec}
A.~Fokin, Y.~Derevenets, A.~Chernov, and K.~Troshina, ``{SmartDec: Approaching
  C++ decompilation},'' in \emph{Working Conference on Reverse Engineering
  (WCRE),}, 2011.

\bibitem{divine:balakrishnan}
G.~Balakrishnan and T.~Reps, ``{DIVINE: Discovering Variables in
  Executables},'' in \emph{International Conference on Verification, Model
  Checking, and Abstract Interpretation (VMCAI),}, 2007.

\bibitem{caballero:inference}
J.~Caballero and Z.~Lin, ``{Type Inference on Executables},'' in \emph{ACM
  Computing Surveys (CSUR),}, 2016.

\bibitem{intel:cet}
``{Intel Control-flow Enforcement Technology (CET)},'' 2016,
  \url{http://blogs.intel.com/evangelists/2016/06/09/intel-release-new-technology-specifications-protect-rop-attacks/}.

\bibitem{windows:cfguard}
``{Windows Control Flow Guard},''
  \url{http://msdn.microsoft.com/en-us/library/windows/desktop/mt637065(v=vs.85).aspx}.

\bibitem{volodymyr:cpi}
V.~Kuznetsov, L.~Szekeres, M.~Payer, G.~Candea, R.~Sekar, and D.~Song,
  ``{Code-Pointer Integrity},'' in \emph{Proceedings of the USENIX Symposium on
  Operating Systems Design and Implementation (OSDI),}, 2014.

\bibitem{vfuard:aravind}
A.~Prakash, X.~Hu, and H.~Yin, ``{Strict Protection for Virtual Function Calls
  in COTS C++ Binaries},'' in \emph{Symposium on Network and Distributed System
  Security (NDSS),}, 2015.

\bibitem{vtint:zhang}
C.~Zhang, C.~Song, K.~C. Zhijie, Z.~Chen, and D.~Song, ``{VTint: Protecting
  Virtual Function Tables\' Integrity},'' in \emph{Proceedings of the Symposium
  on Network and Distributed System Security (NDSS),}, 2015.

\bibitem{veen:cfi}
V.~v.~d. Veen, D.~Andriesse, E.~Göktas, B.~Gras, L.~Sambuc, A.~Slowinska,
  H.~Bos, and C.~Giuffrida, ``{Practical Context-Sensiticve CFI},'' in
  \emph{Proceedings of the ACM SIGSAC Conference on Computer and Communications
  Security (CCS),}, 2015.

\bibitem{dep}
C.~t. F. i. M. W. X. S. P.~. Microsoft,
  \url{https://technet.microsoft.com/en-us/library/bb457151.aspx.}

\bibitem{ASLR}
P.~T. A. S.~L. Randomization, 2001,
  \url{https://pax.grsecurity.net/docs/aslr.txt}.

\bibitem{ROP}
E.~Buchanan, R.~Roemer, H.~Shacham, and S.~Savage, ``{When Good Instructions Go
  Bad: Generalizing Return-oriented Programming to RISC},'' in \emph{ACM
  Conference on Computer and Communications Security (CCS),}, 2008.

\bibitem{kornau:rop}
T.~Kornau, ``{Return-Oriented Programming for the ARM Architecture},''
  \url{http://www.zynamics.com/downloads/kornau-tim--diplomarbeit--rop.pdf}.

\bibitem{rop:shacham}
H.~Shacham, ``{The Geometry of Innocent Flesh on the Bone: Return-into-Libc
  without Function Calls (On the x86)},'' in \emph{ACM Conference on Computer
  and Communications Security (CCS),}, 2007.

\bibitem{JOP1}
T.~Bletsch, X.~Jiang, V.~W. Freeh, and Z.~Liang, ``{Jump-Oriented Programming:
  A New Class of Code-Reuse Attack},'' in \emph{ACM Symposium on Information,
  Computer and Communications Security (ASIACCS),}, 2011.

\bibitem{JOP2}
S.~Checkoway, L.~Davi, A.~Dmitrienko, A.-R. Sadeghi, H.~Shacham, and
  M.~Winandy, ``{Return-oriented Programming Without Returns},'' in \emph{ACM
  Conference on Computer and Communications Security (CCS),}, 2010.

\bibitem{JOP3}
L.~Davi, A.~Dmitrienko, A.-R. Sadeghi, and M.~Winandy, ``{Return-Oriented
  Programming without Returns on ARM},'' in \emph{Technical report, Technical
  Report HGI-TR-2010-002, Ruhr-University Bochum,}, 2010.

\bibitem{rop:carlini}
N.~Carlini and D.~Wagner, ``{ROP is still dangerous: Breaking Modern
  Defenses},'' in \emph{Proceedings of the USENIX conference on Security
  (USENIX SEC),}, 2014.

\bibitem{cfci:zhang}
M.~Zhang and R.~Sekar, ``{Control Flow and Code Integrity for COTS binaries: An
  Effective Defense Against Real-ROP Attcks},'' in \emph{Annual Computer
  Security Applications Conference (ACSAC),}, 2015.

\bibitem{mohan:opaque}
V.~Mohan, P.~Larsen, S.~Brunthaler, K.~W. Hamlen, and M.~Franz, ``{Opaque
  Control-Flow Integrity},'' in \emph{Symposium on Network and Distributed
  System Security (NDSS),}, 2015.

\bibitem{ccfi:jose}
A.~J. Mashtizadeh, A.~Bittau, D.~Boneh, and D.~Mazières, ``{CCFI:
  Cryptograhically Enforced Control Flow Integrity},'' in \emph{Proceedings of
  the ACM SIGSAC Conference on Computer and Communications Security (CCS),},
  2015.

\bibitem{pblocker:prakash}
A.~Prakash and H.~Yin, ``{Defeating ROP Through Denial of Stack Pivot},'' in
  \emph{Annual Computer Security Applications Conference (ACSAC),}, 2015.

\bibitem{dynaguard:petsios}
T.~Petsios, V.~P. Kemerlis, M.~Polychronakis, and A.~D. Keromytis,
  ``{DynaGuard: Armoring Canary-based Protections against Brute-force
  Attacks},'' in \emph{Annual Computer Security Applications Conference
  (ACSAC),}, 2015.

\bibitem{cfiguard:yuan}
P.~Yuan, Q.~Zeng, and X.~Ding, ``{Hardware-Assisted Fine-Grained Code-Reuse
  Attack Detection},'' in \emph{Proceedings of the International Symposium on
  Research in Attacks, Intrusions, and Defenses (RAID),}, 2015.

\bibitem{mcfi:niu}
B.~Niu and G.~Tan, ``{Modular Control-Flow VTint: Protecting Virtual Function
  TabIntegrity},'' in \emph{ACM Conferece on Programming Language Design and
  Implementation (PLDI),}, 2014.

\bibitem{rockjit:niu}
------, ``{RockJIT: Securing Just-In-Time Compilation Using Modular
  Control-Flow Inegrity},'' in \emph{Proceedings of the ACM Conference on
  Computer and Communications Security (CCS),}, 2014.

\bibitem{perinput:niu}
------, ``{Per-Input Control-Flow Integrity},'' in \emph{Proceedings the ACM
  Conference on Computer and Communications Security (CCS),}, 2015.

\end{thebibliography}
