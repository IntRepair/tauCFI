Current Situation:
history[
    {
        ["context"] = "module",
        [$module_path] = {
            ["status"] = [
                "compiled", # if the corresponding line containing "<MMD>" has been parsed
            ]
            ["call_target"] = []
            ["address_taken"] = []
            ["compiled_function"] = []
            ["ct_index"] = list of name pairs (entry["demang_name"], entry["mang_name"]) corresponding to
                the entries in ["call_target"]
            ["at_index"] = list of name pairs (entry["demang_name"], entry["mang_name"]) corresponding to
                the entries in ["address_taken"]
            ["cfn_index"] = list of name pairs (entry["demang_name"], entry["mang_name"]) corresponding to
                the entries in ["compiled_function"]

            ["call_target_double"]
            ["address_taken_double"]
            ["compiled_function_double"]
            ["ct_index_double"] = list of name pairs (entry["demang_name"], entry["mang_name"]) corresponding to
                the entries in ["call_target_double"]
            ["at_index_double"] = list of name pairs (entry["demang_name"], entry["mang_name"]) corresponding to
                the entries in ["address_taken_double"]
            ["cfn_index_double"] = list of name pairs (entry["demang_name"], entry["mang_name"]) corresponding to
                the entries in ["compiled_function_double"]

            ["call_site"]
            ["call_site_double"]
        }

    },
    {
        ["context"] = "binary",
        ["sources"] = 
        ["sources_double"] = 
    },
    ...
]

        # Parse Linker Entry
        elif line.count(self._linker_tag) > 0:
            entry = fparser.map_line_to_values_linker(line)

            if "binary" in entry.keys():
                binary = entry["binary"]

                if binary not in self._get_binary_data(binary, "sources"):
                    self._add_binary_data(binary, "sources", entry)
                else:
                    self._add_binary_data(binary, "sources_double", (binary, entry["source"]))
