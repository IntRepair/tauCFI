# This is a sample config file. It was tested with:
# 
#      Compiler name/version:       PGI 2011
#      Operating system version:    64-bit SuSE 10.2
#      Hardware:                    x86_64 Based Systems
#
# If your platform uses different versions, different
# hardware or operates in a different mode (for 
# example, 32- vs. 64-bit mode), there is the possibiliy
# that this configuration file may not work as-is. 
# 
# Note that issues with compilation should be directed
# to the compiler vendor. Information about SPEC techncial
# support can be found in the techsupport document in the
# Docs directory of your benchmark installation.
#
# Also note that this is a sample configuration. It
# is expected to work for the environment in which
# it was tested; it is not guaranteed that this is 
# the config file that will provide the best performance.
# 
# Note that you might find a more recent config file for
# your platform with the posted results at
# www.spec.org/cpu2006
#
# Important! Please run with your stack size set to 'unlimited'.
# Failure to do so may cause 483.xalancbmk to get a stack overflow during execution.
# Using csh:  unlimit
# Using bash: ulimit -s unlimited
#
# Set your LD_LIBRARY_PATH to the location of the PGI runtime libraries
#
# Also be sure to adjust the submit command and makeflags to match
# the number of cores in use. 

#####################################################################
# Header Section 
#####################################################################
ext           = pgi2011
# Use the pgi2011_int32_cpp extension to compile INT C++ in 32-bits.
#ext           = pgi2011_int32_cpp
ignore_errors = no
tune          = base,peak
output_format = asc,pdf,raw,flags,cfg
size          = test,train,ref
check_md5     = yes
reportable    = yes
env_vars      = no
teeout        = yes
use_submit_for_speed = 1
flagsurl      = $[top]/config/flags/Example-pgi2011-linux-flags.xml

# Adjust the make flag for the number of cores.
makeflags     = -j 2

# Please adjust these values for your particular system
# This configuration is for a 4 socket / 8 core system
bind0         = numactl -m 0 --physcpubind=0
bind1         = numactl -m 0 --physcpubind=1
bind2         = numactl -m 1 --physcpubind=2
bind3         = numactl -m 1 --physcpubind=3
bind4         = numactl -m 2 --physcpubind=4
bind5         = numactl -m 2 --physcpubind=5
bind6         = numactl -m 3 --physcpubind=6
bind7         = numactl -m 3 --physcpubind=7


# We've encounterd a bug in numactl on SLES 10 where it interprets a
# benchmark's args as it's own.  If your Perlbench, gcc, soplex, gromacs, etc 
# runs abort, try using the following submit command
submit       = echo "$command" > run.sh ; $BIND sh run.sh
#submit       = $BIND $command


#####################################################################
# Macro section
####################################################################
# Modify this section to use the appropriate architecture flags
# Choices for 64-bits might be k8-64, barcelona-64, core2-64, p7-64
#  Note, more than one architecture flag may be used, ex k8-64,p7-64
#  to create a "Unified Binary". 
# Choices for 32-bits might be k8-32, barcelona, core2, p7
# Please consult the most current PGI User's guide for a more complete
#  list of available architecure flags and information about
#  PGI Unified Binary.

%define pgi_tp64 
%define pgi_tp32 

####################################################################
# Tester information
####################################################################
license_num	= 0000
prepared_by     = Your Name (Your_email@your_co.com)
tester   	= Your Company
test_sponsor	= Sponsor Company

####################################################################
# Hardware information
####################################################################
# default sysinfo is expected to write hw_cpu_name, hw_memory, hw_nchips,
# hw_disk
default=default=default=default:
hw_avail     	   = Jan-9999
hw_cpu_mhz         = 9999
hw_fpu             = Integrated
hw_ncores          = 9999
hw_ncoresperchip   = 9999
hw_nthreadspercore = 9999
hw_ncpuorder       = 1 to 9999 chips
hw_pcache          = 9999 MB I + 9999 MB D on chip per chip
hw_scache          = 9999 MB I+D on chip per chip
hw_tcache          = 9999 MB I+D off chip per chip
hw_ocache          = None
hw_vendor          = Vendor Name
hw_model           = Model Name
hw_other           = None

####################################################################
# Software information
####################################################################
# default sysinfo is expected to write prepared_by, sw_os, sw_file, sw_state
int=default=default=default:
sw_avail         = Nov-2010
sw_compiler      = PGI Server Complete, Release 2011

int=default=pgi2011=default:
sw_peak_ptrsize  = 64-bit
sw_base_ptrsize  = 64-bit

int=default=pgi2011_int32_cpp=default:
# If not using Microquill's Smartheap library, comment out this line
sw_other         = SmartHeap 8.0 32-bit Library for Linux
sw_peak_ptrsize  = 32/64-bit
sw_base_ptrsize  = 32/64-bit

fp=default=default=default:
sw_avail         = Nov-2010
sw_compiler      = PGI Server Complete, Release 2011
sw_peak_ptrsize  = 64-bit
sw_base_ptrsize  = 64-bit

default=default=default=default:
#####################################################################
# Compiler selection
#####################################################################
CC           = pgcc -w 
CXX          = pgcpp -w
FC           = pgf95 -w


#####################################################################
# Optimization
#####################################################################
default=default=default=default:
EXTRA_LDFLAGS = -Bstatic_pgi

fp=base=default=default:
COPTIMIZE    = -fast -Mipa=fast,inline -Mfprelaxed -Msmartalloc %{pgi_tp64}
CXXOPTIMIZE  = -fast -Mipa=fast,inline -Mfprelaxed -Msmartalloc %{pgi_tp64}
FOPTIMIZE    = -fast -Mipa=fast,inline -Mfprelaxed -Msmartalloc %{pgi_tp64}

int=base=pgi2011=default:
COPTIMIZE    = -fast -Mipa=fast,inline -Mfprelaxed -Msmartalloc %{pgi_tp64}
CXXOPTIMIZE  = -fast -Mipa=fast,inline -Mfprelaxed -Msmartalloc %{pgi_tp64}

int=base=pgi2011_int32_cpp=default:
# Adjust this path if you're using Microquill's Smartheap library,
# otherwise comment out these lines
SHL_DIR = /path/to/SmartHeap/lib
EXTRA_CXXLIBS= -L$(SHL_DIR) -lsmartheap
COPTIMIZE    = -fast -Mipa=fast,inline -Mfprelaxed -Msmartalloc %{pgi_tp64}
CXXOPTIMIZE  = -fastsse -Mipa=fast,inline -Mfprelaxed -Msmartalloc %{pgi_tp32}

default=peak=default=default:
basepeak=true

#####################################################################
# Portability
#####################################################################

fp=default=default=default:
PORTABILITY  = -DSPEC_CPU_LP64

int=default=pgi2011=default:
PORTABILITY = -DSPEC_CPU_LP64

int=default=pgi2011_int32_cpp=default:
CPORTABILITY = -DSPEC_CPU_LP64

400.perlbench=default=pgi2011=default:
CPORTABILITY =  -DSPEC_CPU_LINUX_X64 

400.perlbench=default=pgi2011_int32_cpp=default:
CPORTABILITY =  -DSPEC_CPU_LP64 -DSPEC_CPU_LINUX_X64 

435.gromacs=default=default=default:
LDPORTABILITY = -Mnomain

436.cactusADM=default=default=default:
LDPORTABILITY = -Mnomain

454.calculix=default=default=default:
LDPORTABILITY = -Mnomain

462.libquantum=default=pgi2011=default:
CPORTABILITY = -DSPEC_CPU_LINUX

462.libquantum=default=pgi2011_int32_cpp=default:
CPORTABILITY = -DSPEC_CPU_LP64 -DSPEC_CPU_LINUX

481.wrf=default=default=default:
CPORTABILITY=-DSPEC_CPU_CASE_FLAG -DSPEC_CPU_LINUX 

483.xalancbmk=default=default=default:
CXXPORTABILITY= -DSPEC_CPU_LINUX

#####################################################################
# Notes
#####################################################################
default=default=default=default:
notes100 = Environment stack size set to 'unlimited'

